import { useEffect, useState } from 'react'

import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useRouter } from 'next/router'

import Dropdown from 'react-bootstrap/Dropdown';
import Modal from 'react-bootstrap/Modal';
import Button from 'react-bootstrap/Button';

export default function Home(props) {
    const router = useRouter()
    const { pokemon_id } = router.query

    const [activePokemon, setActivePokemon] = useState(null)

    const [searchInput, setSearchInput] = useState('')
    const [filterType, setFilterType] = useState([])
    const [filterWeaknesses, setFilterWeaknesses] = useState([])

    const [showDetails, setShowDetails] = useState(false);

    const [uniqueTypes, setUniqueTypes] = useState([])
    const [uniqueWeaknesses, setUniqueWeaknesses] = useState([])

    const handleClose = () => {
        setShowDetails(false)
        router.push('/', undefined, { scroll: false })
    };

    const handleShow = () => setShowDetails(true);

    const clearFilters = () => {
        setSearchInput('')
        setFilterWeaknesses([])
        setFilterType([])
    };

    function addFilterType(item) {
        console.log(item)

        if (filterType.includes(item)) {
            setFilterType(
                filterType.filter(filterItem => filterItem != item)
            )
        } else {
            setFilterType(
                [
                    ...filterType,
                    item
                ]
            )
        }


    };

    function addFilterWeaknesses(item) {
        console.log(item)

        if (filterWeaknesses.includes(item)) {
            setFilterWeaknesses(
                filterWeaknesses.filter(filterItem => filterItem != item)
            )
        } else {
            setFilterWeaknesses(
                [
                    ...filterWeaknesses,
                    item
                ]
            )
        }

    };

    function filterFunctionFilterType (pokemon) {

        if (filterType.length > 0) {

            const types = pokemon.type;

            if ( filterType.every( v => types.includes(v) ) ) {
                return pokemon
            } else {
                return false
            }

        } else {
            return pokemon
        }

    }

    function filterFunctionFilterWeakness (pokemon) {

        if (filterWeaknesses.length > 0) {

            const weaknesses = pokemon.weaknesses;

            if ( filterWeaknesses.every( v => weaknesses.includes(v) ) ) {
                return pokemon
            } else {
                return false
            }

        } else {
            return pokemon
        }

    }

    function filterFunctionFilterSearch (pokemon) {

        if (searchInput !== '') {
            return pokemon.name.includes(searchInput)
        } else {
            return pokemon
        }

    }

    useEffect(() => {

        let allTypes = []
        let allWeakness = []

        props.data.pokemon.map(pokemon => allTypes.push(...pokemon.type))
        props.data.pokemon.map(pokemon => allWeakness.push(...pokemon.weaknesses))

        setUniqueTypes(allTypes.filter(function (item, pos) {
            return allTypes.indexOf(item) == pos;
        })
        )

        setUniqueWeaknesses(allWeakness.filter(function (item, pos) {
            return allWeakness.indexOf(item) == pos;
        })

        )

    }, []);

    useEffect(() => {

        if (router.isReady && pokemon_id) {
            setActivePokemon(props.data.pokemon.find(pokemon => pokemon.id == pokemon_id))
            console.log(router)
            handleShow()
        }

    }, [router]);

    return (
        <div className={'pokedex-page'}>

            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <img className='site-background' src="/images/background.jpg" alt="" />

            {/* Bonus Details Modal */}
            <Modal show={showDetails} centered onHide={handleClose}>

                <Modal.Header >
                    <Modal.Title>{activePokemon?.name}</Modal.Title>
                    <div>{activePokemon?.num}</div>
                </Modal.Header>

                <Modal.Body>

                    <img className='mx-auto d-block' src={activePokemon?.img} alt="" />

                    <ul class="list-group list-group-flush mb-3">

                        <li class="list-group-item">Type: {activePokemon?.type.map(type => <span className='badge bg-danger me-1'>{type}</span>)}</li>

                        <li class="list-group-item">Weaknesses: {activePokemon?.weaknesses.map(type => <span className='badge bg-danger me-1'>{type}</span>)}</li>

                        <li class="list-group-item">Height: <span className='badge bg-danger'>{activePokemon?.height}</span></li>

                        <li class="list-group-item">Weight: <span className='badge bg-danger'>{activePokemon?.weight}</span></li>

                    </ul>

                    {activePokemon?.prev_evolution?.length > 0 &&
                        <div className='mb-2'>
                            <h6>Prev Evolution:</h6>
                            {activePokemon?.prev_evolution?.map(pokemon =>
                                <Link scroll={false} href={`/${pokemon.num}`}>
                                    <a>
                                        <Button variant="secondary" className="me-1">
                                            {pokemon.name}
                                        </Button>
                                    </a>
                                </Link>
                            )}
                        </div>
                    }

                    {activePokemon?.next_evolution?.length > 0 &&
                        <div className='mb-2'>
                            <h6>Next Evolution:</h6>
                            {activePokemon?.next_evolution?.map(pokemon =>
                                <Link scroll={false} href={`/${pokemon.num}`}>
                                    <a>
                                        <Button variant="secondary" className="me-1">
                                            {pokemon.name}
                                        </Button>
                                    </a>
                                </Link>
                            )}
                        </div>
                    }

                    {/* <li class="list-group-item"></li> */}

                    {/* <div>
                        {JSON.stringify(activePokemon, null, 4)}
                    </div> */}

                </Modal.Body>

                <Modal.Footer>
                    <Button variant="secondary" onClick={handleClose}>
                        Close
                    </Button>
                </Modal.Footer>

            </Modal>

            <nav>

                <div className='nav-section'>
                    <Image src="/images/pokedex.png" alt="Vercel Logo" objectFit='contain' width={80} height={50} />
                    <h5 className='title'>Joey Giusto's Pokedex</h5>
                </div>

                <div className='nav-section'>

                    <input autoFocus placeholder='Search Pokemon...' className='search-bar' type="text" value={searchInput} onChange={e => setSearchInput(e.target.value)} />

                    <div className='dropdowns'>
                        <Dropdown>

                            <Dropdown.Toggle variant="danger" id="dropdown-basic">
                                <span className='badge bg-light text-dark me-2'>{filterType.length}</span>Type
                            </Dropdown.Toggle>

                            <Dropdown.Menu>
                                {uniqueTypes.map(item => <Dropdown.Item key={item} className={`${filterType.includes(item) && 'active'}`} onClick={() => addFilterType(item)} >{item}</Dropdown.Item>)}
                                {/* <Dropdown.Item href="#/action-1">Action</Dropdown.Item>
                                <Dropdown.Item href="#/action-2">Another action</Dropdown.Item>
                                <Dropdown.Item href="#/action-3">Something else</Dropdown.Item> */}
                            </Dropdown.Menu>

                        </Dropdown>

                        <Dropdown>

                            <Dropdown.Toggle variant="danger" id="dropdown-basic">
                                <span className='badge bg-light text-dark me-2'>{filterWeaknesses.length}</span>Weaknesses
                            </Dropdown.Toggle>

                            <Dropdown.Menu>
                                {uniqueWeaknesses.map(item => <Dropdown.Item key={item} className={`${filterWeaknesses.includes(item) && 'active'}`} onClick={() => addFilterWeaknesses(item)} >{item}</Dropdown.Item>)}
                                {/* <Dropdown.Item href="#/action-1">Action</Dropdown.Item>
                                <Dropdown.Item href="#/action-2">Another action</Dropdown.Item>
                                <Dropdown.Item href="#/action-3">Something else</Dropdown.Item> */}
                            </Dropdown.Menu>

                        </Dropdown>
                    </div>

                    <Button className='clear-button' onClick={clearFilters} variant="secondary">
                        Clear Filters
                    </Button>

                </div>

            </nav>

            <main>

                <div className='d-none'>

                    <div>
                        <h5 className="mb-0">
                            Unique Types
                        </h5>
                        <ul>
                            {uniqueTypes.map(item => <li>{item}</li>)}
                        </ul>
                    </div>

                    <div>
                        <h5 className="mb-0">
                            Unique Weaknesses
                        </h5>
                        <ul>
                            {uniqueWeaknesses.map(item => <li>{item}</li>)}
                        </ul>
                    </div>

                </div>

                <ul className={'pokemon-list text-center'}>

                    {
                        props.data.pokemon
                            .filter(filterFunctionFilterSearch)
                            .filter(filterFunctionFilterType)
                            .filter(filterFunctionFilterWeakness)
                            .length == 0 &&
                        <div className='no-results'>
                            <div className='no-results-container'>
                                <img src='/images/surprised.gif'></img>
                                <h5>No Results!</h5>
                                <Button onClick={clearFilters} variant="secondary">
                                    Clear Filters
                                </Button>
                            </div>
                        </div>
                    }

                    {props.data.pokemon
                        .filter(filterFunctionFilterSearch)
                        .filter(filterFunctionFilterType)
                        .filter(filterFunctionFilterWeakness)
                        .map((pokemon, i) => {

                            return (
                                <li key={pokemon.name} className={'list-item'}>
                                    <Link scroll={false} href={`/${pokemon.id}`}>
                                        <a>

                                            <div className={'background'} style={{ backgroundImage: `url(${pokemon.img})` }}></div>

                                            <div className='item-header'>
                                                <h5 className='title'>{pokemon.name}</h5>
                                                <div className='num'>{pokemon.num}</div>
                                            </div>

                                            <div className='img-wrap'>
                                                <img src={pokemon.img} alt="" />
                                            </div>

                                            <div className='details-container'>

                                                <h5>Type</h5>
                                                <div className='mb-3'>{pokemon.type.map(type => <div>{type}</div>)}</div>

                                                <h5>Weaknesses</h5>
                                                <div>{pokemon.weaknesses.map(weakness => <div>{weakness}</div>)}</div>

                                            </div>

                                        </a>
                                    </Link>
                                </li>
                            )
                        })}

                </ul>

            </main>

            <footer>
                <a
                    href="https://github.com/joegiusto"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    <span>
                        <Image src="/images/github.png" alt="Vercel Logo" width={50} height={50} />
                    </span>
                </a>
            </footer>
        </div>
    )
}

// Wanted to do this so there is no client side loading, could have done axios/fetch and a loading state
export async function getServerSideProps() {

    const res = await fetch(`https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json`)
    const data = await res.json()

    return { props: { data } }

}